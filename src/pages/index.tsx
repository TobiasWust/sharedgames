import { useQueries } from "@tanstack/react-query";
import Head from "next/head";
import { useEffect, useState } from "react";
import intersection from "../utils/intersection";

type Player = {
  player: {
    personaname: string;
  };
  ownedGames: string[];
};

type GameProps = {
  isLoading: boolean;
  data: {
    name: string;
  };
};

function Game({ isLoading, data }: GameProps) {
  return <li>{data.name}</li>;
}

export default function Home() {
  const [playerId, setPlayerId] = useState("tobiaswust");
  const [players, setPlayers] = useState<Player[]>([]);
  const [gameIds, setGameIds] = useState<string[]>([]);

  function getPlayerData() {
    fetch(`/api/getPlayer?playerId=${playerId}`)
      .then((res) => res.json())
      .then((data) => {
        if (
          players.find(
            (player) => player.player.personaname === data.personaname
          )
        )
          return;
        setPlayers((state) => [...state, data]);
      });
  }

  const gamesResult = useQueries({
    queries: gameIds.map((gameId) => ({
      queryKey: ["games", gameId],
      queryFn: () =>
        fetch(`/api/getGameInfos?gameId=${gameId}`).then((res) => res.json()),
      staleTime: Infinity,
    })),
  });

  useEffect(() => {
    if (players.length > 1) {
      const gIds = intersection(players.map((player) => player.ownedGames));
      setGameIds(gIds);
    }
  }, [players]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="grid max-w-md gap-3">
        <input
          type="text"
          value={playerId}
          onChange={(e) => setPlayerId(e.target.value)}
        />
        <button type="button" onClick={getPlayerData}>
          Get Player Data
        </button>
        <h2>Players:</h2>
        <ul>
          {players.map((player) => (
            <li>{player.player.personaname}</li>
          ))}
        </ul>
        <h2>Games:</h2>
        <p>Games in common: {gameIds.length}</p>
        {gameIds.length === 0 && <p>No games in common</p>}
        <ul>
          {gamesResult.map((gameResult) => (
            <Game isLoading={gameResult.isLoading} data={gameResult.data} />
          ))}
        </ul>
      </main>
    </>
  );
}
